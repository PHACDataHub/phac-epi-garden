generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

// From the demo code: keep for now
model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

model diesel_schema_migrations {
  version String   @id @db.VarChar(50)
  run_on  DateTime @default(now()) @db.Timestamp(6)

  @@map("__diesel_schema_migrations")
}

model affiliations {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  person_id        String        @db.Uuid
  organization_id  String        @db.Uuid
  affiliation_role String        @db.VarChar(256)
  start_datestamp  DateTime      @default(now()) @db.Timestamp(6)
  end_date         DateTime?     @db.Timestamp(6)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  organizations    organizations @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  persons          persons       @relation(fields: [person_id], references: [id], onUpdate: NoAction)
}

model capabilities {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name_en               String            @db.VarChar(256)
  name_fr               String            @db.VarChar(256)
  domain                skill_domain
  person_id             String            @db.Uuid
  skill_id              String            @db.Uuid
  organization_id       String            @db.Uuid
  self_identified_level capability_level
  validated_level       capability_level?
  created_at            DateTime          @default(now()) @db.Timestamp(6)
  updated_at            DateTime          @default(now()) @db.Timestamp(6)
  retired_at            DateTime?         @db.Timestamp(6)
  validation_values     BigInt[]
  organizations         organizations     @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  persons               persons           @relation(fields: [person_id], references: [id], onUpdate: NoAction)
  skills                skills            @relation(fields: [skill_id], references: [id], onUpdate: NoAction)
  validations           validations[]
}

model language_datas {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  person_id     String          @db.Uuid
  language_name language_name
  reading       language_level?
  writing       language_level?
  speaking      language_level?
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  persons       persons         @relation(fields: [person_id], references: [id], onUpdate: NoAction)
}

model org_tier_ownerships {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id    String    @db.Uuid
  org_tier_id String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  retired_at  DateTime? @db.Timestamp(6)
  org_tiers   org_tiers @relation(fields: [org_tier_id], references: [id], onUpdate: NoAction)
  persons     persons   @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model org_tiers {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id     String                @db.Uuid
  tier_level          Int
  name_en             String                @unique @db.VarChar(256)
  name_fr             String                @unique @db.VarChar(256)
  primary_domain      skill_domain
  parent_tier         String?               @db.Uuid
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  retired_at          DateTime?             @db.Timestamp(6)
  org_tier_ownerships org_tier_ownerships[]
  organizations       organizations         @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  org_tiers           org_tiers?            @relation("org_tiersToorg_tiers", fields: [parent_tier], references: [id], onDelete: Restrict, onUpdate: NoAction)
  other_org_tiers     org_tiers[]           @relation("org_tiersToorg_tiers")
  teams               teams[]
}

model organizations {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name_en      String         @unique @db.VarChar(256)
  name_fr      String         @unique @db.VarChar(256)
  acronym_en   String         @unique @db.VarChar(16)
  acronym_fr   String         @unique @db.VarChar(16)
  org_type     String         @db.VarChar(32)
  url          String         @db.VarChar(256)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  retired_at   DateTime?      @db.Timestamp(6)
  affiliations affiliations[]
  capabilities capabilities[]
  org_tiers    org_tiers[]
  persons      persons[]
  publications publications[]
  teams        teams[]
}

model persons {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String                     @unique @db.Uuid
  family_name              String                     @db.VarChar
  given_name               String                     @db.VarChar
  email                    String                     @unique @db.VarChar(128)
  phone                    String                     @unique @db.VarChar(32)
  work_address             String                     @db.VarChar(256)
  city                     String                     @db.VarChar(128)
  province                 String                     @db.VarChar(128)
  postal_code              String                     @db.VarChar(16)
  country                  String                     @db.VarChar(128)
  organization_id          String                     @db.Uuid
  peoplesoft_id            String                     @db.VarChar
  orcid_id                 String                     @db.VarChar
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  updated_at               DateTime                   @default(now()) @db.Timestamp(6)
  retired_at               DateTime?                  @db.Timestamp(6)
  affiliations             affiliations[]
  capabilities             capabilities[]
  language_datas           language_datas[]
  org_tier_ownerships      org_tier_ownerships[]
  organizations            organizations              @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  publication_contributors publication_contributors[]
  publications             publications[]
  roles                    roles[]
  team_ownerships          team_ownerships[]
  validations              validations[]
}

model publication_contributors {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  publication_id   String       @db.Uuid
  contributor_id   String       @db.Uuid
  contributor_role String       @db.VarChar(256)
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  persons          persons      @relation(fields: [contributor_id], references: [id], onUpdate: NoAction)
  publications     publications @relation(fields: [publication_id], references: [id], onUpdate: NoAction)
}

model publications {
  id                         String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  publishing_organization_id String                     @db.Uuid
  lead_author_id             String                     @db.Uuid
  title                      String                     @db.VarChar(256)
  subject_text               String                     @db.VarChar(256)
  publication_status         publication_status
  url_string                 String?                    @db.VarChar(256)
  publishing_id              String?                    @db.VarChar(256)
  submitted_date             DateTime?                  @db.Timestamp(6)
  published_datestamp        DateTime?                  @db.Timestamp(6)
  created_at                 DateTime                   @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                   @default(now()) @db.Timestamp(6)
  publication_contributors   publication_contributors[]
  persons                    persons                    @relation(fields: [lead_author_id], references: [id], onUpdate: NoAction)
  organizations              organizations              @relation(fields: [publishing_organization_id], references: [id], onUpdate: NoAction)
}

model requirements {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name_en        String           @db.VarChar(256)
  name_fr        String           @db.VarChar(256)
  domain         skill_domain
  role_id        String           @db.Uuid
  skill_id       String           @db.Uuid
  required_level capability_level
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  retired_at     DateTime?        @db.Timestamp(6)
  roles          roles            @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  skills         skills           @relation(fields: [skill_id], references: [id], onUpdate: NoAction)
}

model roles {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  person_id       String?        @db.Uuid
  team_id         String         @db.Uuid
  title_en        String         @db.VarChar(256)
  title_fr        String         @db.VarChar(256)
  effort          Float
  active          Boolean
  hr_group        hr_group
  hr_level        Int
  start_datestamp DateTime       @db.Timestamp(6)
  end_date        DateTime?      @db.Timestamp(6)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  requirements    requirements[]
  persons         persons?       @relation(fields: [person_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  teams           teams          @relation(fields: [team_id], references: [id], onUpdate: NoAction)
  tasks           tasks[]
  works           works[]
}

model skills {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name_en        String         @unique @db.VarChar(256)
  name_fr        String         @unique @db.VarChar(256)
  description_en String
  description_fr String
  domain         skill_domain
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime       @default(now()) @db.Timestamp(6)
  retired_at     DateTime?      @db.Timestamp(6)
  capabilities   capabilities[]
  requirements   requirements[]
}

model tasks {
  id                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_by_role_id     String       @db.Uuid
  title                  String       @db.VarChar(144)
  domain                 skill_domain
  intended_outcome       String       @db.VarChar(1256)
  final_outcome          String?      @db.VarChar(1256)
  approval_tier          Int          @default(4)
  url                    String       @db.VarChar(256)
  start_datestamp        DateTime     @default(now()) @db.Timestamp(6)
  target_completion_date DateTime     @db.Timestamp(6)
  task_status            work_status  @default(planning)
  completed_date         DateTime?    @db.Timestamp(6)
  created_at             DateTime     @default(now()) @db.Timestamp(6)
  updated_at             DateTime     @default(now()) @db.Timestamp(6)
  roles                  roles        @relation(fields: [created_by_role_id], references: [id], onUpdate: NoAction)
  works                  works[]
}

model team_ownerships {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  person_id       String    @db.Uuid
  team_id         String    @db.Uuid
  start_datestamp DateTime  @db.Timestamp(6)
  end_date        DateTime? @db.Timestamp(6)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  persons         persons   @relation(fields: [person_id], references: [id], onUpdate: NoAction)
  teams           teams     @relation(fields: [team_id], references: [id], onUpdate: NoAction)
}

model teams {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String            @db.Uuid
  org_tier_id     String            @db.Uuid
  primary_domain  skill_domain
  name_en         String            @unique @db.VarChar(256)
  name_fr         String            @unique @db.VarChar(256)
  description_en  String
  description_fr  String
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  retired_at      DateTime?         @db.Timestamp(6)
  roles           roles[]
  team_ownerships team_ownerships[]
  org_tiers       org_tiers         @relation(fields: [org_tier_id], references: [id], onUpdate: NoAction)
  organizations   organizations     @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
}

model users {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hash                 String      @db.VarChar(255)
  email                String      @unique(map: "users__email_idx") @db.VarChar(128)
  role                 String      @default("USER") @db.VarChar(64)
  name                 String      @db.VarChar(256)
  access_level         String      @db.VarChar(64)
  created_at           DateTime    @default(now()) @db.Timestamp(6)
  updated_at           DateTime    @default(now()) @db.Timestamp(6)
  access_key           String      @db.VarChar(256)
  approved_by_user_uid String?     @db.Uuid
  valid_roles          valid_roles @relation(fields: [role], references: [role], onDelete: NoAction)
}

model valid_roles {
  role  String  @id @db.VarChar(64)
  users users[]
}

model validations {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  validator_id    String           @db.Uuid
  capability_id   String           @db.Uuid
  validated_level capability_level
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  capabilities    capabilities     @relation(fields: [capability_id], references: [id], onUpdate: NoAction)
  persons         persons          @relation(fields: [validator_id], references: [id], onUpdate: NoAction)
}

model works {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_id          String           @db.Uuid
  role_id          String           @db.Uuid
  work_description String           @db.VarChar(256)
  url              String?          @db.VarChar(256)
  domain           skill_domain
  capability_level capability_level
  effort           Int
  work_status      work_status
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime         @default(now()) @db.Timestamp(6)
  roles            roles            @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  tasks            tasks            @relation(fields: [task_id], references: [id], onUpdate: NoAction)
}

enum access_level_enum {
  adminstrator
  analyst
  employee
  research
  open
}

enum capability_level {
  desired
  novice
  experienced
  expert
  specialist
}

enum hr_group {
  ec
  as
  pm
  cr
  pe
  is
  fi
  res
  ex
  dm
}

enum language_level {
  a
  b
  c
  e
  x
}

enum language_name {
  english
  french
  arabic
  chinese
  spanish
  german
  japanese
  korean
  italian
  other
}

enum publication_status {
  planning
  in_progress
  draft
  submitted
  published
  rejected
  cancelled
}

enum skill_domain {
  public_health
  policy
  data
  information_technology
  human_resources
  finance
  communications
  administration
  scientific
  medical
  management
  leadership
  partnerships
}

enum work_status {
  backlog
  planning
  in_progress
  completed
  blocked
  cancelled
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}